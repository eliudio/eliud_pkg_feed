import 'package:eliud_core/tools/query/query_tools.dart';
import 'package:eliud_pkg_feed/model/abstract_repository_singleton.dart';
import 'package:eliud_pkg_feed/model/post_model.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_tagging/flutter_tagging.dart';

typedef SelectedMembersCallback(List<String> selectedMembers);

class SelectMembersWidget extends StatefulWidget {
  final String appId;
  final String feedId;
  final String memberId;
  final List<SelectedMember> initiallySelectedMembers;
  final SelectedMembersCallback selectedMembersCallback;
  final MemberService memberService;

  const SelectMembersWidget._(
      {Key? key,
      required this.appId,
      required this.feedId,
      required this.memberId,
      required this.initiallySelectedMembers,
      required this.selectedMembersCallback,
      required this.memberService})
      : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _SelectMembersWidgetState();
  }

  static Widget get(
      {required String appId,
      required String feedId,
      required String memberId,
      required List<String>? initialMembers,
      required SelectedMembersCallback selectedMembersCallback}) {
    var memberService = MemberService(appId, feedId, memberId);
    var future = memberService.getFromIDs(initialMembers);
    return FutureBuilder<List<SelectedMember>>(
        future: future,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return SelectMembersWidget._(
                appId: appId,
                feedId: feedId,
                memberId: memberId,
                initiallySelectedMembers: snapshot.data!,
                selectedMembersCallback: selectedMembersCallback,
                memberService: memberService);
          } else {
            return Center(child: CircularProgressIndicator());
          }
        });
  }
}

class _SelectMembersWidgetState extends State<SelectMembersWidget> {
  @override
  Widget build(BuildContext context) {
    var _selectedMembers = widget.initiallySelectedMembers;
    return Column(
      children: <Widget>[
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: FlutterTagging<SelectedMember>(
              initialItems: _selectedMembers,
              textFieldConfiguration: TextFieldConfiguration(
                decoration: InputDecoration(
                  border: InputBorder.none,
                  filled: true,
                  fillColor: Colors.grey.withAlpha(30),
                  hintText: 'Search Members',
                  labelText: 'Select Members',
                ),
              ),
              findSuggestions: (value) =>
                  widget.memberService.getMembers(value),
              additionCallback: (value) {
                return SelectedMember(
                  name: value,
                  memberId: value,
                );
              },
              configureSuggestion: (lang) {
                return SuggestionConfiguration(
                  title: Text(lang.name),
                );
              },
              configureChip: (lang) {
                return ChipConfiguration(
                  label: Text(lang.name),
                  backgroundColor: Colors.grey,
                  labelStyle: TextStyle(color: Colors.white),
                  deleteIconColor: Colors.white,
                );
              },
              onChanged: () {
                var values =
                    _selectedMembers.map((value) => value.name).toList();
                widget.selectedMembersCallback(values);
              }),
        ),
      ],
    );
  }
}

class MemberService {
  final String appId;
  final String feedId;
  final String memberId;

  MemberService(this.appId, this.feedId, this.memberId);

  Future<List<SelectedMember>> getFromIDs(List<String>? ids) {
    /*if (ids == null) */ return Future.value(<SelectedMember>[]);

    // 1. map the ids to id+feed
    // 2. query where id in that list from 1.
    // 3. map to SelectedMember

//    return null;
  }

  Future<List<SelectedMember>> getMembers(String query) async {

    return <SelectedMember>[
      SelectedMember(name: 'JavaScript', memberId: '1'),
      SelectedMember(name: 'Python', memberId: '2'),
      SelectedMember(name: 'Java', memberId: '3'),
      SelectedMember(name: 'PHP', memberId: '4'),
      SelectedMember(name: 'C#', memberId: '5'),
      SelectedMember(name: 'C++', memberId: '6'),
    ]
        .where((lang) => lang.name.toLowerCase().contains(query.toLowerCase()))
        .toList();
    String queryFrom = query;
    String queryTill = query + 'a'; // replace the last character with ascii + 1
    var values = await memberProfileRepository(appId: appId)!.valuesList(
        eliudQuery: EliudQuery()
/*
        .withCondition(EliudQueryCondition('nameOverride',
        isGreaterThanOrEqualTo: queryFrom))
        .withCondition(EliudQueryCondition('nameOverride',
        isLessThan: queryTill))
*/
            .withCondition(EliudQueryCondition('feedId', isEqualTo: feedId))
            .withCondition(EliudQueryCondition('readAccess',
                arrayContainsAny: [memberId, 'PUBLIC'])));
    return values
        .map((value) => SelectedMember(
            memberId: value!.authorId!, name: value.nameOverride!))
        .toList();
  }
}

class SelectedMember extends Taggable {
  final String memberId;
  final String name;

  SelectedMember({
    required this.memberId,
    required this.name,
  });

  @override
  List<Object> get props => [memberId, name];
}
